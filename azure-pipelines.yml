
trigger:
- github

jobs:
- job: windows_tests
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      git config --global core.autocrlf false
    displayName: git config
  - checkout: self
    fetchDepth: 1
  - script: vcpkg.exe install tcl --triplet x64-windows
    displayName: vcpkg install dependencies
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-A x64 -DGTEST=ON -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake ..'
  - task: MSBuild@1
    inputs:
      solution: 'build/ALL_BUILD.vcxproj'
      maximumCpuCount: true
      platform: 'x64'
      configuration: 'Debug'
  - script: build\gtest\Debug\scid_tests.exe
    displayName: run scid_tests.exe

- job: windows_latest
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      mkdir tcltk & cd tcltk
      git clone --depth=1 --branch core-8-6-10 https://github.com/tcltk/tcl.git
      cd tcl & cd win
      nmake -f makefile.vc INSTALLDIR=$(Build.SourcesDirectory)\tcldir
      nmake -f makefile.vc install INSTALLDIR=$(Build.SourcesDirectory)\tcldir
    displayName: Generate tcl library
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      cd tcltk
      git clone --depth=1 --branch core-8-6-10 https://github.com/tcltk/tk.git
      cd tk & cd win
      nmake -f makefile.vc INSTALLDIR=$(Build.SourcesDirectory)\tcldir
      nmake -f makefile.vc install INSTALLDIR=$(Build.SourcesDirectory)\tcldir
    displayName: Generate tk library
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/install -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)\tcldir\include $(Build.SourcesDirectory)'
  - task: MSBuild@1
    inputs:
      solution: 'build/INSTALL.vcxproj'
      maximumCpuCount: true
      platform: 'x64'
      configuration: 'Release'
      msbuildArguments: "/p:SpectreMitigation=false /p:RuntimeTypeInfo=false /p:EnableCOMDATFolding=true /p:LinkTimeCodeGeneration=UseLinkTimeCodeGeneration"
    displayName: Generate SCID
  - script: |
      pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
      popd
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
      git clone --depth=1 https://github.com/official-stockfish/Stockfish.git stockfish
      cd stockfish\src
      cl /DNDEBUG /DUSE_POPCNT /GS- /MT /O2 /Oi /Ot /Oy /GL *.cpp syzygy/*.cpp /link /STACK:reserve=8388608 /OUT:stockfish.exe
      copy stockfish.exe $(Build.SourcesDirectory)\install\bin
    displayName: Generate stockfish
  - script: |
      move bin engines
      move scid bin
      copy $(Build.SourcesDirectory)\tcldir\bin\*.dll bin
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tcl8 lib\tcl8\
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tcl8.6 lib\tcl8.6\
      xcopy /e $(Build.SourcesDirectory)\tcldir\lib\tk8.6 lib\tk8.6\
    workingDirectory: '$(Build.SourcesDirectory)\install'
    displayName: Add the tcl/tk library to the package
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\install'
      TargetFolder: '$(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: windows x64'
    inputs:
      artifactName: windows_x64
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: ubuntu_latest
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      sudo apt-get update &&
      sudo apt-get -y install tcl-dev
    displayName: download tclk
  - script: |
      mkdir build && cd build
      cmake -DCPACK_GENERATOR=DEB \
            -DCPACK_DEBIAN_PACKAGE_MAINTAINER="Fulvio Benini" \
            -DCPACK_DEBIAN_PACKAGE_DEPENDS=tk \
            -DCPACK_DEBIAN_PACKAGE_LICENSE=GPL2 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fno-exceptions -fno-rtti" \
            -DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++ -static-libgcc" \
             $(Build.SourcesDirectory)
      make package
    displayName: Generate SCID
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/build'
      Contents: '*.deb'
      TargetFolder: '$(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian x64'
    inputs:
      artifactName: debian_x64
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: linux_static
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      mkdir tcltk && cd tcltk
      git clone --depth=1 --branch core-8-6-10 https://github.com/tcltk/tcl.git
      cd tcl && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --disable-shared --enable-threads
      make && make install
    displayName: Generate tcl library
  - script: |
      cd tcltk
      git clone --depth=1 --branch core-8-6-10 https://github.com/tcltk/tk.git
      cd tk && cd unix
      ./configure --prefix=$(Build.SourcesDirectory)/tcltk --enable-threads
      make && make install
    displayName: Generate tk library
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/install -DTCL_INCLUDE_PATH=$(Build.SourcesDirectory)/tcltk/include -DTCL_LIBRARY=$(Build.SourcesDirectory)/tcltk/lib/libtcl8.6.a -DCMAKE_CXX_STANDARD_LIBRARIES="-lz -ldl" $(Build.SourcesDirectory)'
  - script: |
      make && make install
    workingDirectory: '$(Build.SourcesDirectory)/build'
    displayName: Generate SCID
  - script: |
      cp -R $(Build.SourcesDirectory)/tcltk/lib/ scid/
      mkdir scid/bin
      mv scid/scid scid/bin
    workingDirectory: '$(Build.SourcesDirectory)/install'
    displayName: Add the tcl/tk library to the package
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/install/scid'
      TargetFolder: '$(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: linux static x64'
    inputs:
      artifactName: linux_static_x64
      PathtoPublish: '$(build.artifactstagingdirectory)'
